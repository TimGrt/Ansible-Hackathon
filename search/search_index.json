{"config":{"lang":["en"],"separator":"[\\s]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Herzlich Willkommen zum Ansible Hackathon Vol.1!</p> <p>Wir wollen mit euch Use-Cases bearbeiten, welche wir auch h\u00e4ufig bei unseren Kunden antreffen und uns dabei insbesondere auf die weniger h\u00e4ufig verwendeten Features der Ansible Automation Platform fokussieren.</p> <p>Der Hackathon steht im Zeichen eines freundlichen Wettkampfs, zwei Teams treten gegeneinander an und bearbeiten jeweils einen eigenen Use-Case.</p> <p> </p> <p>Diese Dokumentation dient zum einen der Beschreibung der beiden Use-Cases, als auch zur Dokumentation der Umsetzung.</p>"},{"location":"demo_environment/","title":"Demo Umgebung","text":"<p>Hier findet ihr die Links zur Demo-Umgebung:</p> <p>Warning</p> <p>ADD LINKS HERE AFTER DEPLOYMENT!</p>"},{"location":"demo_environment/#aap-automatisierung","title":"AAP Automatisierung","text":"<p>Zur Automatisierung der Ansible Automation Platform (Controller, EDA, Automation Hub) sind die folgenden Links hilfreich:</p> <ul> <li>infra.aap_configuration auf Galaxy</li> <li>Github Repository f\u00fcr infra.aap_configuration Collection</li> <li>Beispiel Template f\u00fcr AAP Configuration as Code</li> </ul> <p>Tip</p> <p>Verwendet die Certified Collection aus dem Red Hat Automation Hub!</p>"},{"location":"usecase_one/usecase_one_description/","title":"EDA mit Netbox, AAP und Openshift","text":""},{"location":"usecase_one/usecase_one_description/#ubersicht","title":"\u00dcbersicht","text":"<p>In diesem Use-Case soll mit Event-Driven Ansible auf Events in der Netbox reagiert werden, bei Anlage eines VM Objekts soll automatisiert eine virtuelle Maschine \u00fcber OpenShift Virtualization im OpenShift Cluster erstellt werden. Anschlie\u00dfend soll auf der virtuellen Maschine noch ein Webserver konfiguriert werden. Folgende Tools sollen hier bei zum Einsatz kommen:</p> <ul> <li>Single Source of Truth Netbox</li> <li>SCM nach Wahl</li> <li>Ansible Automation Platform</li> <li>OpenShift / OpenShift Virtualization</li> <li>Event-Driven Ansible</li> <li>Ansible Navigator</li> <li>Ansible Builder v3</li> <li>Execution Environment (default oder custom)</li> </ul> <p>Ziel</p> <p>Die Playbooks befinden sich in einem SCM, der Usecase ist vollautomatisiert und nach Doku Vorgaben zu beschreiben.</p>"},{"location":"usecase_one/usecase_one_description/#vorgehen","title":"Vorgehen","text":"<ul> <li> <p> Step 1     Es sollen mehrere simple Device Objekte, ohne viel Individualisierung, in der Netbox angelegt werden. Die Anlage, der zu erstellende Objekte, kann durch ein Playbook mit Hilfe der Netbox Collection erfolgen. Zur Orientierung gibt es auf Github vordefinierte Device Types GitHub</p> <p>Tip</p> <p>Man kann alle Objektdaten des Inventory Plugin \u00fcber ansible-inventory anzeigen.</p> </li> <li> <p> Step 2     \u00dcber einen Webhook, aus der Netbox, soll ein Playbook f\u00fcr die Erstellung eines Containers oder VM getriggert werden. Hier zu werden alle Daten (IP, Hostname usw.) \u00fcber ein dynamisches Inventory, aus der Netbox verwendet.</p> </li> <li> <p> Step 3     Event-Driven Automation Rulebook erstellen und auf ein beliebiges Event h\u00f6ren z.B. Prozess oder \u00c4nderung des Netboxobjekt. Durch das getriggerte Event wird ein Playbook ausgef\u00fchrt und der Container oder die VM repariert. Hierzu kann der Container oder die VM auch einfach gel\u00f6scht und neu erstellt werden. Alles soll nach den Tests \u00fcber die AAP 2.5 funktionieren.</p> </li> <li> <p> Step 4     In der VM soll automatisiert ein Webserver installiert werden, mit der Dokumentation des Projekts. Es kann das GitHub Projekt des Hackathon verwendet werden und um die Dokumentation erweitert werden.</p> <p>Tipps zum Deployment der Dokumentation</p> <p>Die folgenden Schritte sind f\u00fcr ein RHEL8-System zu befolgen:</p> <p> Webserver-Paket <code>httpd</code> installieren  Git-Paket <code>git</code> installieren  Projekt per HTTPS klonen: <code>https://github.com/TimGrt/Ansible-Hackathon.git</code>  Notwendige Python-Version <code>python3.12</code> und Python-Paket-Manager <code>python3.12-pip</code> installieren  Python-Dependencies <code>requirements.txt</code>des Projekts installieren (passenden Paketmanager ausw\u00e4hlen!)  MkDocs Projekt bauen: <code>python3.12 -m mkdocs build --site-dir /var/www/html</code>  Webserver starten  </p> <p>Success</p> <p>Das Playbook soll nat\u00fcrlich idempotent sein!</p> Lokal testen mit Molecule <p>Die oben beschriebenen Schritte k\u00f6nnen auch lokal mit Molecule getestet werden, nutzt dabei die Beschreibung aus dem Best Practice Guide. Ein passender Test-Container (UBI8 Init-Container, verh\u00e4lt sich sehr \u00e4hnlich zu RHEL8-VM) ist hier zu finden: ghcr.io/timgrt/rhel8-molecule-test-image:main</p> </li> </ul>"},{"location":"usecase_one/usecase_one_description/#links","title":"Links","text":"<p>Einige hilfreiche Tipps findet ihr hier:</p> <ul> <li>netbox-community Devicetype-library documentation</li> <li>Ansible Builder documentation </li> <li>Ansible Navigator documentation</li> <li>Event-Driven Ansible documentation</li> </ul>"},{"location":"usecase_one/usecase_one_documentation/","title":"Use-Case 1 Dokumentation","text":"<p>TODO</p> <p>Hier soll eure Dokumentation f\u00fcr den ersten Use-Case entstehen!  </p> <p>Die Dokumentation ist einfach Markdown, im verwendeten MkDocs Material Theme k\u00f6nnt ihr noch einige zus\u00e4tzliche Dinge hinterlegen. Schaut in die Doku oder auch in den Contributing Guide dieses Repositories.</p> <p>Generell sollte die Dokumentation die folgenden Punkte enthalten:</p> <pre><code># Title\n\nBrief description of the role, what it does and what not.\n\n## Architecture\n\nHere is a brief overview of the architecture\n\n## Challenges and ToDo's\n\nIf anything is missing, add a short description here.\n\n## Installation guide\n\nDescription of the installation\n\n## Requirements\n\nTechnical requirements, e.g. necessary packages/rpms, own modules or plugins.\n\n## Dependencies\n\nThis role expects to run **after** the following roles:\n* repository\n* networking\n* common\n* software\n\n## Tool definition 1\n\nDescription of the first tool used\n\n## Tool definition 2\n\nDescription of the second tool used\n\n## Tool definition 3\n\nDescription of the third tool used\n\n## Ansible playbook\n\n### Role Variables\n\nThe role uses the following variables:\n\n| Variable Name | Type    | Default Value | Description            |\n| ------------- | ------- | ------------- | ---------------------- |\n| example       | Boolean | false         | Brief description      |\n\n### Tags\n\nThe role can be executed with the following tags:\n* install\n* configure\n* service\n\n### Example Playbook\n\nUse the role in a playbook like this (after running plays/roles from dependencies section):\n```yaml\n- name: Execute role\n  hosts: example_servers\n  become: true\n  roles:\n    - example_role\n```\n\n## Authors\n\nTim Gr\u00fctzmacher - &lt;tim.gruetzmacher@computacenter.com&gt;\nJonathan Schmidt - &lt;jonathan.schmidt@computacenter.com&gt;\n</code></pre>"},{"location":"usecase_two/usecase_two_description/","title":"EDA mit Netbox, Ansible Automation Platform und Openshift","text":""},{"location":"usecase_two/usecase_two_description/#ubersicht","title":"\u00dcbersicht","text":"<p>In diesem Use-Case soll mit Event-Driven Ansible auf Events in der Netbox reagiert werden, bei Anlage eines VM Objekts soll automatisiert eine virtuelle Maschine \u00fcber OpenShift Virtualization im OpenShift Cluster erstellt werden. Anschlie\u00dfend soll auf der virtuellen Maschine noch ein Webserver konfiguriert werden. Folgende Tools sollen hier bei zum Einsatz kommen:</p> <ul> <li>Single Source of Truth Netbox</li> <li>SCM nach Wahl</li> <li>Ansible Automation Platform</li> <li>OpenShift / OpenShift Virtualization</li> <li>Event-Driven Ansible</li> <li>Ansible Navigator</li> <li>Ansible Builder v3</li> <li>Execution Environment (default oder custom)</li> </ul> <p>Ziel</p> <p>Die Playbooks befinden sich in einem SCM, der Usecase ist vollautomatisiert und nach Doku Vorgaben zu beschreiben.</p>"},{"location":"usecase_two/usecase_two_description/#vorgehen","title":"Vorgehen","text":"<ul> <li> <p> Step 1     Es sollen mehrere simple Device Objekte, ohne viel Individualisierung, in der Netbox angelegt werden. Die Anlage, der zu erstellende Objekte, kann durch ein Playbook mit Hilfe der Netbox Collection erfolgen. Zur Orientierung gibt es auf Github vordefinierte Device Types GitHub</p> <ul> <li>netbox-community Devicetype-library</li> </ul> <p>Tip</p> <p>Man kann alle Objektdaten des Inventory Plugin \u00fcber ansible-inventory anzeigen.</p> </li> <li> <p> Step 2     \u00dcber einen Webhook, aus der Netbox, soll ein Playbook f\u00fcr die Erstellung eines Containers oder VM getriggert werden. Hier zu werden alle Daten (IP, Hostname usw.) \u00fcber ein dynamisches Inventory, aus der Netbox verwendet.</p> </li> <li> <p> Step 3     Event driven Automation Rulebook erstellen und auf ein beliebiges Event h\u00f6ren z.B. Prozess oder \u00c4nderung des Netboxobjekt. Durch das getriggerte Event wird ein Playbook ausgef\u00fchrt und der Container oder die VM repariert. Hierzu kann der Container oder die VM auch einfach gel\u00f6scht und neu erstellt werden. Alles soll nach den Tests \u00fcber die AAP 2.5 funktionieren.</p> </li> <li> <p> Step 4     In der VM soll automatisiert ein Webserver installiert werden, mit der Dokumentation des Projekts. Es kann das GitHub Projekt des Hackathon verwendet werden und um die Dokumentation erweitert werden.</p> <p>Tipps zum Deployment der Dokumentation</p> <p>Die folgenden Schritte sind f\u00fcr ein RHEL8-System zu befolgen:</p> <ol> <li>Webserver-Paket <code>httpd</code> installieren</li> <li>Git-Paket <code>git</code> installieren</li> <li>Projekt per HTTPS klonen: <code>https://github.com/TimGrt/Ansible-Hackathon.git</code></li> <li>Notwendige Python-Version <code>python3.12</code> und Python-Paket-Manager <code>python3.12-pip</code> installieren</li> <li>Python-Dependencies des Projekts \u00fcber <code>requirements.txt</code> installieren (passenden Paketmanager ausw\u00e4hlen!)</li> <li>MkDocs Projekt bauen: <code>python3.12 -m mkdocs build --site-dir /var/www/html</code></li> <li>Webserver starten</li> </ol> <p>Success</p> <p>Das Playbook soll nat\u00fcrlich idempotent sein!</p> Lokal testen mit Molecule <p>Die oben beschriebenen Schritte k\u00f6nnen auch lokal mit Molecule getestet werden, nutzt dabei die Beschreibung aus dem Best Practice Guide. Ein passender Test-Container (UBI8 Init-Container, verh\u00e4lt sich sehr \u00e4hnlich zu RHEL8-VM) ist hier zu finden: ghcr.io/timgrt/rhel8-molecule-test-image:main</p> </li> </ul>"},{"location":"usecase_two/usecase_two_description/#links","title":"Links","text":"<p>Einige hilfreiche Tipps findet ihr hier:</p> <ul> <li>netbox-community Devicetype-library</li> <li>ansible-builder</li> <li>ansible-navigator</li> <li>event-driven-ansible</li> </ul>"},{"location":"usecase_two/usecase_two_documentation/","title":"Use-Case 2 Dokumentation","text":"<p>TODO</p> <p>Hier soll eure Dokumentation f\u00fcr den zweiten Use-Case entstehen!  </p> <p>Die Dokumentation ist einfach Markdown, im verwendeten MkDocs Material Theme k\u00f6nnt ihr noch einige zus\u00e4tzliche Dinge hinterlegen. Schaut in die Doku oder auch in den Contributing Guide dieses Repositories.</p> <p>Generell sollte die Dokumentation die folgenden Punkte enthalten:</p> <pre><code># Title\n\nBrief description of the role, what it does and what not.\n\n## Architecture\n\nHere is a brief overview of the architecture\n\n## Challenges and ToDo's\n\nIf anything is missing, add a short description here.\n\n## Installation guide\n\nDescription of the installation\n\n## Requirements\n\nTechnical requirements, e.g. necessary packages/rpms, own modules or plugins.\n\n## Dependencies\n\nThis role expects to run **after** the following roles:\n* repository\n* networking\n* common\n* software\n\n## Tool definition 1\n\nDescription of the first tool used\n\n## Tool definition 2\n\nDescription of the second tool used\n\n## Tool definition 3\n\nDescription of the third tool used\n\n## Ansible playbook\n\n### Role Variables\n\nThe role uses the following variables:\n\n| Variable Name | Type    | Default Value | Description            |\n| ------------- | ------- | ------------- | ---------------------- |\n| example       | Boolean | false         | Brief description      |\n\n### Tags\n\nThe role can be executed with the following tags:\n* install\n* configure\n* service\n\n### Example Playbook\n\nUse the role in a playbook like this (after running plays/roles from dependencies section):\n```yaml\n- name: Execute role\n  hosts: example_servers\n  become: true\n  roles:\n    - example_role\n```\n\n## Authors\n\nTim Gr\u00fctzmacher - &lt;tim.gruetzmacher@computacenter.com&gt;\nJonathan Schmidt - &lt;jonathan.schmidt@computacenter.com&gt;\n</code></pre>"}]}